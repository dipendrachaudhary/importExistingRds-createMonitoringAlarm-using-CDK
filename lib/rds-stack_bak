import { Stack, StackProps, CfnOutput, Duration, SecretValue } from 'aws-cdk-lib';
import * as rds from "aws-cdk-lib/aws-rds";
// import { duration } from 'aws-cdk-lib';
import * as cloudwatch from "@aws-cdk/aws-cloudwatch"
import * as ec2 from "aws-cdk-lib/aws-ec2";
import { Construct } from 'constructs';
import { Period } from 'aws-cdk-lib/aws-apigateway';
import { DatabaseInstance } from 'aws-cdk-lib/aws-rds';
import * as cdk from '@aws-cdk/core';
import { Instance } from '@aws-cdk/aws-ec2';
import * as logs from '@aws-cdk/aws-logs'



export interface AwsCdkAutoraCwAlarmsStackProps extends StackProps {
  readonly safeIp: string;
  readonly dbUsername: string;
  readonly dbPassword: string;
  readonly dbName: string;
}

export class AwsCdkAuroraCwAlarmsStack extends Stack {
  constructor(scope: Construct, id: string, props: AwsCdkAutoraCwAlarmsStackProps) {
    super(scope, id, props);

    // ðŸ‘‡ create the VPC
    // const vpc = new ec2.Vpc(this, 'my-cdk-vpc', {
    //   cidr: '10.0.0.0/16',
    //   maxAzs: 3,
    //   subnetConfiguration: [
    //     {
    //       name: 'public-subnet-1',
    //       subnetType: ec2.SubnetType.PUBLIC,
    //       cidrMask: 24,
    //     },
    //   ],
    // });

    const vpc = ec2.Vpc.fromLookup(this, 'DefaultVPC', {
      isDefault: true,
      //Tags.of(defaultVpc).add('Name', 'my-cdk-default-vpc'),
    });

    // ðŸ‘‡ create a security group for the EC2 instance
    const ec2InstanceSG = new ec2.SecurityGroup(this, 'ec2-instance-sg', {
      vpc,
    });

    ec2InstanceSG.addIngressRule(
      ec2.Peer.anyIpv4(),
      ec2.Port.tcp(22),
      'allow SSH connections from anywhere',
    );

    // ðŸ‘‡ create the EC2 instance
    const ec2Instance = new ec2.Instance(this, 'ec2-instance', {
      vpc,
      vpcSubnets: {
        subnetType: ec2.SubnetType.PUBLIC,
      },
      securityGroup: ec2InstanceSG,
      instanceType: ec2.InstanceType.of(
        ec2.InstanceClass.T2,
        ec2.InstanceSize.MICRO,
      ),
      machineImage: new ec2.AmazonLinuxImage({
        generation: ec2.AmazonLinuxGeneration.AMAZON_LINUX_2,
      }),
      keyName: 'landingZone',
    });

    const cluster = new rds.DatabaseCluster(this, 'Database', {
      engine: rds.DatabaseClusterEngine.auroraMysql({ version: rds.AuroraMysqlEngineVersion.VER_2_08_1 }),
      //credentials: rds.Credentials.fromGeneratedSecret('clusteradmin'), // Optional - will default to 'admin' username and generated password
      credentials: rds.Credentials.fromPassword(
        props.dbUsername,
        SecretValue.plainText(props.dbPassword),
      ),
      defaultDatabaseName: props.dbName,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      deletionProtection: false,
      instanceProps: {
        // optional , defaults to t3.medium
        instanceType: ec2.InstanceType.of(ec2.InstanceClass.BURSTABLE2, ec2.InstanceSize.SMALL),
        vpcSubnets: {
          subnetType: ec2.SubnetType.PUBLIC,
        },
        vpc,
      },
      defaultDatabaseName: 'ORCL',
      storageEncrypted: true,
      monitoringInterval: cdk.Duration.seconds(60),
      cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,
    });

    cdk.Tags.of(cluster).add('Name', 'AuroraMysqlRdsCluster', {
    //includeResourceTypes: ['AWS::DynamoDB::Table'],
    });

    // Allow connections on default port from any IPV4
    cluster.connections.allowDefaultPortFromAnyIpv4();

    // Rotate the master user password every 30 days
    cluster.addRotationSingleUser();

    // Add alarm for VolumeReadIOPS
    // new cloudwatch.Alarm(this, 'VolumeReadIOPS', {
    //   metric: cluster.metricVolumeReadIOPs(),
    //   threshold: 90,
    //   evaluationPeriods: 1,
    // });

    // new cloudwatch.Alarm(this, 'VolumeWriteIOPS', {
    //   metric: cluster.metricVolumeWriteIOPs(),
    //   threshold: 90,
    //   evaluationPeriods: 1,
    // });

    cluster.connections.allowFrom(ec2Instance, ec2.Port.tcp(5432));

    // new cloudwatch.Alarm(this, 'ReadIOPS', {
    //   metric: rds.DatabaseInstance.prototype.metricReadIOPS(),
    //   threshold: 90,
    //   evaluationPeriods: 1,
    // });

    //VolumeReadIOPS
    const VolumeReadIOPSmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'VolumeReadIOPS',
      dimensionsMap: {
        dbClusterIdentifier: cluster.clusterIdentifier
      }
    });

    new cloudwatch.Alarm(this, 'VolumeReadIOPSAlarm', {
      metric: VolumeReadIOPSmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });

    //VolumeWriteIOPS
    const VolumeWriteIOPSmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'VolumeWriteIOPS',
      dimensionsMap: {
        dbClusterIdentifier: cluster.clusterIdentifier
      }
    });

    new cloudwatch.Alarm(this, 'VolumeWriteIOPSAlarm', {
      metric: VolumeWriteIOPSmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });

    //ReadIOPS
    const ReadIOPSmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'ReadIOPS',
      dimensionsMap: {
        DBInstanceIdentifier: cluster.instanceIdentifiers[1]
      }
    });

    new cloudwatch.Alarm(this, 'ReadIOPSAlarm', {
      metric: ReadIOPSmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });

    // WriteIOPS
    const WriteIOPSmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'WriteIOPS',
      dimensionsMap: {
        DBInstanceIdentifier: cluster.instanceIdentifiers[0]
      }
    });

    new cloudwatch.Alarm(this, 'WriteIOPSAlarm', {
      metric: WriteIOPSmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });

    //ReaderDiskQueueDepth
    const ReaderDiskQueueDepthmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'DiskQueueDepth',
      dimensionsMap: {
        DBInstanceIdentifier: cluster.instanceIdentifiers[1]
      }
    });

    new cloudwatch.Alarm(this, 'ReaderDiskQueueDepth', {
      metric: ReaderDiskQueueDepthmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });
    
    //WriterDiskQueueDepth
    const WriterDiskQueueDepthmetric = new cloudwatch.Metric({
      namespace: 'AWS/RDS',
      metricName: 'DiskQueueDepth',
      dimensionsMap: {
        DBInstanceIdentifier: cluster.instanceIdentifiers[0]
      }
    });

    new cloudwatch.Alarm(this, 'WriterDiskQueueDepth', {
      metric: WriterDiskQueueDepthmetric,
      threshold: 100,
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
    });

    // ðŸ‘‡ create RDS instance
    // const dbInstance = new rds.DatabaseInstance(this, 'db-instance', {
    //   vpc,
    //   vpcSubnets: {
    //     subnetType: ec2.SubnetType.PUBLIC,
    //   },
    //   engine: rds.DatabaseInstanceEngine.postgres({
    //     version: rds.PostgresEngineVersion.VER_14_1,
    //   }),
    //   instanceType: ec2.InstanceType.of(
    //     ec2.InstanceClass.BURSTABLE3,
    //     ec2.InstanceSize.MICRO,
    //   ),
    //   credentials: rds.Credentials.fromGeneratedSecret('postgres'),
    //   multiAz: false,
    //   allocatedStorage: 100,
    //   maxAllocatedStorage: 105,
    //   allowMajorVersionUpgrade: false,
    //   autoMinorVersionUpgrade: true,
    //   backupRetention: cdk.Duration.days(0),
    //   deleteAutomatedBackups: true,
    //   removalPolicy: cdk.RemovalPolicy.DESTROY,
    //   deletionProtection: false,
    //   databaseName: 'todosdb',
    //   publiclyAccessible: false,
    //   storageEncrypted: true,
    //   monitoringInterval: cdk.Duration.seconds(60),
    //   enablePerformanceInsights: true,
    //   // cloudwatchLogsExports: [
    //   //   'trace',
    //   //   'audit',
    //   //   'alert',
    //   //   'listener',
    //   // ],
    //   cloudwatchLogsRetention: logs.RetentionDays.ONE_MONTH,
    //   //autoMinorVersionUpgrade: false,
    //   //optionGroup,
    //   //parameterGroup,
    // });

    // // Allow connections on default port from any IPV4
    // dbInstance.connections.allowDefaultPortFromAnyIpv4();

    // // Rotate the master user password every 30 days
    // dbInstance.addRotationSingleUser();

    // // Add alarm for ReadIOPS
    // new cloudwatch.Alarm(this, 'ReadIOPS', {
    //   metric: dbInstance.metricReadIOPS(),
    //   threshold: 90,
    //   evaluationPeriods: 1,
    // });

    // dbInstance.connections.allowFrom(ec2Instance, ec2.Port.tcp(5432));

    // const dbConnections = dbInstance.metricReadIOPS();

    // Average CPU utilization over 5 minutes
    // declare const cluster: rds.DatabaseCluster;
    // const cpuUtilization = dbInstance.metricCPUUtilization();

    // // The average amount of time taken per disk I/O operation (average over 1 minute)
    // const readLatency = dbInstance.metric('ReadLatency', {
    //    statistic: 'Average',
    //    //period: Duration.seconds(60)
    //   });

    // const metric = new cloudwatch.Metric({
    //   namespace: 'AWS/RDS',
    //   metricName: 'DNSQueries',
    // });

    

    // new cdk.CfnOutput(this, 'dbEndpoint', {
    //   //value: dbInstance.instanceEndpoint.hostname,
    //   value: cluster.instanceEndpoints
    // });

    // new cdk.CfnOutput(this, 'secretName', {
    //   //eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
    //   //value: dbInstance.secret?.secretName!,
    //   value: cluster.secret?.secretValue
    //  });
   }
 }
